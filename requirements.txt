
streamlit
tensorflow
numpy
pillow
matplotlib
gdown




import streamlit as st 
from PIL import Image
import numpy as np
import tensorflow as tf
import gdown
import os
import matplotlib.pyplot as plt

st.set_page_config(page_title="üåø Plant Disease Detector", layout="centered")
st.title("üåø Plant Disease Detector")

@st.cache_resource
def load_model():
    file_id = "1cXjIkuMIHNtQ4rvo9fjsKRG0utsB4CQ5"
    model_path = "plant_leaf_dis.keras"
    if not os.path.exists(model_path):
        gdown.download(f"https://drive.google.com/uc?id={file_id}", model_path, quiet=False)
    return tf.keras.models.load_model(model_path)

model = load_model()

class_names = ['Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy',
               'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy',
               'Tomato_Bacterial_spot', 'Tomato_Early_blight', 'Tomato_Late_blight',
               'Tomato_Leaf_Mold', 'Tomato_Septoria_leaf_spot',
               'Tomato_Spider_mites_Two_spotted_spider_mite',
               'Tomato__Target_Spot', 'Tomato__Tomato_YellowLeaf__Curl_Virus',
               'Tomato__Tomato_mosaic_virus', 'Tomato_healthy']

uploaded_file = st.file_uploader("üì∏ Upload a leaf image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="üñºÔ∏è Uploaded Image", use_container_width=True)

    st.write("üîç Classifying...")

    img = image.resize((128, 128))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    predictions = model.predict(img_array)
    predicted_class = class_names[np.argmax(predictions)]
    confidence = float(np.max(predictions))

    # Probability Distribution Plot
    st.subheader("üìä Class Probability Distribution")
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.barh(class_names, predictions[0], color='skyblue')
    ax.set_xlabel('Confidence')
    ax.set_title('Prediction Confidence per Class')
    ax.invert_yaxis()
    for bar in bars:
        width = bar.get_width()
        ax.text(width + 0.01, bar.get_y() + bar.get_height()/2, f"{width:.2f}", va='center')
    plt.tight_layout()
    st.pyplot(fig)

    st.write(f"**Prediction:** {predicted_class}")
    st.write(f"**Confidence:** {confidence:.2f}")

    if "healthy" in predicted_class.lower():
        st.success("‚úÖ The plant is HEALTHY")
    else:
        st.warning(f"‚ö†Ô∏è The plant is DISEASED with: **{predicted_class}**")
